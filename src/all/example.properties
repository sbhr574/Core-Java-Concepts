1.String literal/equals()
 >> public class ToString {
	ToString(String str) {}

	public static void main(String arg[]){
	ToString t1=new ToString("anu");
	ToString t2= new ToString("anu");
	System.out.println(t1.equals(t2));
	String s1="moni";
	String s2="moni";
	System.out.println(s1.equals(s2));
	StringBuffer b1=new StringBuffer("roy");
	StringBuffer b2=new StringBuffer("roy");
	System.out.println(b1.equals(b2));
		}}
		
2. String to StringBuffer/StringBuffer to String

 >> public class ToString {
	public static void main(String arg[]){
	String str="roy";
	StringBuffer b1=new StringBuffer(str);
	System.out.println(b1);
	StringBuffer b2=new StringBuffer("moni");
	String s1=b2.toString();
		System.out.println(s1);
		}	
	}
	
3. String is immutable/StringBuffer is a mutable class

 	>> public class ToString {
	public static void main(String arg[]){
	StringBuffer s1=new StringBuffer("moni");
	StringBuffer s2=new StringBuffer(" roy");
	s1.append(s2);
	System.out.println(s1);
	String s3="moumi";
	s3.concat("roy");
	System.out.println(s3);
	StringBuilder s4=new StringBuilder("jayashree");
	StringBuilder s5=new StringBuilder(" roy");
	s4.append(s5);
	System.out.println(s4);
	}	
	}
 	
 4. How to print the referance variable because its prienting as a hashcode.
 
 	>>public class ToString {
	int eid = 1;
	String ename = "roy";
	 ToString(int eid,String ename){
		this.eid=eid;
		this.ename=ename;
	}
	 public String toString(){
		 return "employee id= " +eid+ "\nemployee name= "+ename;
	 }
	public static void main(String arg[]){
		ToString t=new ToString(1,"sam");
		System.out.println(t);
		System.out.println(t.toString());
	}	
	}
	
5. Anonymous Inner Class

a)	>>class test1{
	void m1() {			//No need to define this method
		System.out.println("m1");
		System.out.println(getClass().getName());
	}	
}
public class InnerC {
	test1 t1=new test1(){
		void m1(){
			System.out.println("i am m1 here");
			System.out.println(t1.getClass().getName());
		}
	};
	public static void main(String[] args) {
		InnerC in=new InnerC();
		in.t1.m1(); //This is main part of Anonymous Inner Class
		test1 tst=new test1();
		tst.m1();
	}
}
b)   >> Anonymous Inner Class with interface
	interface ToString{
	  void m1();
		}
	 class InnerC{
	 ToString t=new ToString(){
		public  void m1(){
			System.out.println("i am not interface object");
			System.out.println(t.getClass().getName());
		}
	};

	public static void main(String arg[]){
	InnerC t1=new InnerC();
	t1.t.m1();
}
}
6. xxxvalue() example

	>>Integer j= new Integer(130);
		System.out.println(j.intValue());
		System.out.println(j.doubleValue());
		System.out.println(j.floatValue());
		
7. valueOf() example

	>>public class ToString{
	public static void main(String arg []){
		int i=10;
		Integer j= Integer.valueOf(i);
		System.out.println(j);
		Boolean b=new Boolean("True");
		Boolean b1=new Boolean("true");
		System.out.println(b);
		System.out.println(b.equals(b1));}}
		
8. Wrapper contructor

	>> a)	Integer I=new Integer(10);
	Integer I1=new Integer(10);
	System.out.println(I.equals(I1));//true
	System.out.println(I==I1);//false
	
	>> b)Float F=new Float(10.5);
	Float F1=new Float(10.6);
	System.out.println(F==F1);//false
	System.out.println(F.equals(F1));//false
	
	>>c) valueOf()
	Float F=Float.valueOf(10.5f);
	Float F1=Float.valueOf("10.5f");
	System.out.println(F);
	System.out.println(F1);
	
	>>d) xxxvalue()
	public class ToString{
	public static void main(String arg []){
		Integer I=10;
		char c1='a';
		System.out.println(I.intValue());
		System.out.println(I.doubleValue());
		System.out.println(I.floatValue());
		Character ch=new Character(c1);
		char c=ch.charValue();
		System.out.println(c);
	}}
	
	>>e) toString
	public class ToString{
	public static void main(String arg []){
		String s="wer";
		String s1="10";
		Integer I2=10000;
		Integer I4=10000;
		String I=Integer.toString(10);
		String I1=Boolean.toString(true);
		String I3=Integer.toString(I2);
		System.out.println(I);
		System.out.println(I1);
		System.out.println(I3);}}

	>> f) autoboxing/autounboxing
	public class ToString{
	public static void main(String arg []){
		Integer I1=100;
		Integer I3=100;
		Integer I2=10000;
		Integer I4=10000;
		String S1="sys";
		String S2="sys";
		System.out.println(S1==S2);
		System.out.println(S1.equals(S2));
		System.out.println(I2==I4);
		System.out.println(I1==I3);
		System.out.println(I1.equals(I3));
		System.out.println(I2.equals(I4));}}
		
9. 	>>	autoboxing/autounboxing
	
	public class ToString{
	static Integer I=10;//--------> AutoBoxing
	public void m1(Integer j){
		int k=I;//----------->AutoBoxing
		System.out.println(k);
	}
	public static void main(String arg []){
		int i=I;//-------->AutounBoxing
		new ToString().m1(i);// ---------------> AutoBoxing
		}
}

10.		>> upcasting downcasting

	public class ToString{
	public void cat(){
		System.out.println("cat from UP");
	}	
}
		public void cat(){
			System.out.println("am from down");
		}
		public void dog(){
			System.out.println("dog am from down");
		}
	}
	 public class cast{
	public static void main(String[] args) {
		//Downcasting
		down d1=new down();
		ToString t1=new down(); //this line and below line is same.
		ToString t2=d1;
		t1.cat();
		t2.cat();
		//upcasting
		ToString t3=new down();
		down d2=(down)d1;
		d2.cat();
		d2.dog();
	}
}

11.		>>array

		public class cast{
		 int eid;
		 String ename;
		 cast(int eid,String ename){
			 this.eid=eid;
			 this.ename=ename;
		 }
	public static void main(String[] args) {
		String s="roy";
		System.out.println(s.length());//this is just lenth of the string
		int a[]=new int[7];
		System.out.println(a.length);//array not supporting any method
		cast c1=new cast(1,"js");
		cast c2=new cast(2,"j2");
		cast c3=new cast(3,"j3");
		cast c4=new cast(4,"j4");
		cast[] c=new cast[5];
		c[0]=c1;
		c[4]=c2;
		c[2]=c3;
		for(Object cc: c ){
			if(cc instanceof cast){
				cast e=(cast) cc;
				System.out.println(e.eid);
			}
			if(cc==null){
				System.out.println(cc);
			}
		}
	}

}
11.		>> array return type

		 public class cast{
		 int[] m1(){
				int []a={12,13,16};
				System.out.println("m1");
				return a;
			}
		 void m2(double[]d){
			 System.out.println("m2S");
			 for(double dd: d){
				 System.out.println(dd);
			 }
		 }
	public static void main(String[] args) {
		cast c=new cast();
		int[]x=c.m1();
		for(int xx: x){
			System.out.println(xx);
			
			double d[]={12.3,13.6};
			c.m2(d);
		}} }
		
12.		>>How to handle calendar using selenium?

	1. With the help of dynamic webtable xpath concept.
	2. Iterate the entire calendar grid by row and colunm.
	3. Match the value and select the day.
	4. Handle the exception like(NoSuchElementException for invalid day).
 
 String date= "12-July-2018";
	String dateary[]= date.split("-"); //dateary will seperate the value{18,July,2018}
	String day = dateary[0];
	String month = dateary[1];
	String year = dateary[2];
	
	String beforeXpath = "//*[@class='k-widget k-calendar']/table/tbody/tr[";
	String afterXpath = "]/td[";
	 final int totalWeekDays = 7;
	 boolean flag = false;
	 String dayval = null;

 for(int rowNum=1; rowNum<=7; rowNum++){
			for(int colNum=1; colNum<=7; colNum++){
				try{
			 dayval = driver.findElement(By.xpath(beforeXpath+rowNum+afterXpath+colNum+"]")).getText();
				}catch(NoSuchElementException e){
					System.out.println("Please enter a correct date");
					flag = false;
					break;
				}
					//System.out.println(dayval);
					if(dayval.equals(day)){
						driver.findElement(By.xpath(beforeXpath+rowNum+afterXpath+colNum+"]")).click();
						flag = true;
						break;
					}
					if(flag){
						break;
					}
					}
					}