1. Static keyword 
public class interview {
	static int a=12;
	static void run(){
		System.out.println("run1");
	}
}
	class a111 extends interview{
		static int a=20;
		int b=100;
		static void run(){
			System.out.println("run");
		}
	
	
	public static void main(String[] args) {
		interview a1=new a111();
		System.out.println(a1.a);
		a1.run();
		}	
	}
	
2. Polymorphism
		a.Upcasting, overridding, late binding
 class a111 {
	 void run(){
		System.out.println("run1");
	}
}
	class interview extends a111{
		 void run(){
			System.out.println("run");
		}
	public static void main(String[] args) {
		a111 a1=new interview();
		a1.run();//run
		
		}	
	}	
		b.overloading,early binding
class interview {
		 void run(){
			System.out.println("run");
		}
		 void run(int a){
				System.out.println("int");
			}
		 void run(float b){
				System.out.println("float");
			}
		 void run(String a){
				System.out.println("String");
			}
	public static void main(String[] args) {
		interview a1=new interview();
		a1.run();//run
		a1.run(12);//int
		a1.run(12.3f);//float
		a1.run("ramu");//String
		
		}
	}		
	
3. HashMap
	class interview {
		 void run(){
			System.out.println("run");
		}
		 void run(int a){
				System.out.println("int");
			}
		 void run(float b){
				System.out.println("float");
			}
		 void run(String a){
				System.out.println("String");
			}
	public static void main(String[] args) {
		Map<Integer,String> mp=new HashMap<>();
		mp.put(1, "name1");
		mp.put(2, "name2");
		mp.put(3, "name3");
		mp.put(4, "name4");
		mp.put(4, "name5");
		mp.put(5, "name3");
		mp.put(3, "name4");
		//This will give only value
		for(int i=1;i<mp.size();i++){
			System.out.println(mp.get(i));
		}
		//This will give both key and value
		for(Entry hm : mp.entrySet()){
			System.out.println(hm.getKey() +" "+hm.getValue());
		}
		//new logic 
		List<Map<Integer,String>> values=new ArrayList<Map<Integer,String>>();
		values.add(mp);
		for(int i=0;i<values.size();i++){
			System.out.println(values.get(i));
		}
		
		}
		
	}
